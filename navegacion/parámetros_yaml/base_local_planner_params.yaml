TrajectoryPlannerROS:
  max_vel_x: 0.15 #de 0.35              # velocidad máxima hacia adelante en m/s
  min_vel_x: -0.15 #ojo -0.15    # velocidad mínima hacia adelante en m/s para garantizar que no haya fricción
  max_vel_theta: 0.25           # velocidad máxima de rotación en rad/seg
  min_vel_theta: -0.25          # velocidad mínima de rotación en rad/seg
  min_in_place_vel_theta: 0.25  # velocidad de rotación mínima para la base mientras el terreno está rotando en rad/seg

  acc_lim_theta: 0.2  #de 1.0          # límite de aceleración en el piso en m/s^2
  acc_lim_x: 1.0  #de 0.2           # límite de aceleración en el aire en m/s^2
  acc_lim_y: 0.0  #de 0.2              # límite de aceleración rotacional en rad/s^2

  holonomic_robot: false        # determina si los comandos de velocidad pertenecen a un robot holonómico o uno que no lo es. Depende de si se mueve en los ejes existentes. Como existen 3 ejes (x, y, z), pero sólo puedes desplazarse por x, z es no-holonómico. Si fuese un dron, sería holonómico

  escape_vel: -0.1              # es la velocidad utilizada para manejar durante escapes en m/s. Debe ser negativa para que el robot opere en reversa cuando recurra a esta. Una velocidad positiva causara que el robot se mueva hacia adelante mientras intenta escapar. 
  yaw_goal_tolerance: 0.2       # tolerancia en radianes para el controlador en yaw/rotación cuando alcanza una meta
  xy_goal_tolerance: 0.2       # tolerancia en metros para el controlador en las distancias x & y cuando alcanza una meta

  meter_scoring: true #estaba en true     # depende de gdist_scale y pdist_scale los cuales son expresados en unidades de metros o celdas
  gdist_scale: 0.8 #comentado             # ponderación de cuánto el controlador debería intentar llegar a su meta local controlando a su vez la velocidad
  pdist_scale: 1.0 #de 1.0 y comentado     # ponderación de cuánto el controlador debería estar cerca del camino que fue dado
  occdist_scale: 0.01 #comentado          # ponderación de cuánto el controlador debería intentar evadir obstáculos
  publish_cost_grid_pc: false #comentado   # si o no se publican cuadros de costos que el planeador de caminos usará cuando planee. Cuando es true sensor_msgs/PointCloud2 estará disponible, y cada nube de puntos representará una cuadrícula de costos que tiene una que tiene un campo para cada componente de la función de puntuación individual, así como el coste total para cada celda y teniendo en cuenta los parámetros de puntuación
  dwa: false                    # para bajos límites de aceleración conviene ponerlo en false.
  heading_lookahead: 0.325      # qué tan lejos mira el robot en metros cuando cuando se anotan diferentes trayectorias de rotación en el mismo lugar

